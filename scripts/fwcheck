#!/usr/bin/env python3

import os
import sys
import ipaddress
import argparse
import subprocess
import logging
from multiprocessing import Pool


LOGGER = logging.getLogger()

class TestException(Exception):
    pass


def validate_ip(ip):
    return str(ipaddress.ip_address(ip))

def validate_port(port):
    return str(int(port))

def tcp_test(ip, port):
    valid_ip = validate_ip(ip)
    valid_port = validate_port(port)
    return ['nc', '-v', '-z', '-w 2', valid_ip, valid_port]

def ping_test(ip):
    valid_ip = validate_ip(ip)
    return ['ping', '-c 2', '-W 2', valid_ip]

def run_test(cmd):
    header = '>>> %s\n' % ' '.join(cmd)
    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT, timeout=10)
    except subprocess.CalledProcessError as e:
        raise TestException(header + str(e))
    return header + output.decode('utf-8').rstrip()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--test', '-t', metavar='COMMAND', help='run test command')
    args = parser.parse_args()

    # Set up logging
    LOGGER.setLevel('DEBUG')
    console = logging.StreamHandler()
    LOGGER.addHandler(console)

    if args.test:
        cmd = args.test.split()
    else:
        cmd = os.environ['SSH_ORIGINAL_COMMAND'].split()

    tests = []

    if cmd[0] == 'tcp-test' and len(cmd) == 3:
        tests = [tcp_test(cmd[1], cmd[2])]
    elif cmd[0] == 'ping-test' and len(cmd) == 2:
        tests = [ping_test(cmd[1])]
    elif cmd[0] == 'default-tests' and len(cmd) == 2:
        tests = [
            tcp_test(cmd[1], 22),
            ping_test(cmd[1])
        ]
    else:
        LOGGER.error('Invalid test command')
        return 1

    results = []
    errors = []

    with Pool() as p:
        result = p.map_async(run_test, tests, callback=results.extend, error_callback=errors.append)
        result.wait()

    if errors:
        LOGGER.error('\n\n'.join([str(i) for i in errors]))
        return 1
    else:
        LOGGER.info('\n\n'.join([i for i in results if i]))

if __name__ == '__main__':
    sys.exit(main())
